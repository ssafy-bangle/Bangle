package com.bangle.global.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class BangleNFT extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040518060400160405280600781526020017f426f6f6b4e4654000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f424654000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000412565b508060019081620000a1919062000412565b505050620000c4620000b8620000ca60201b60201c565b620000d260201b60201c565b620004f9565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200021a57607f821691505b60208210810362000230576200022f620001d2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200029a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200025b565b620002a686836200025b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002f3620002ed620002e784620002be565b620002c8565b620002be565b9050919050565b6000819050919050565b6200030f83620002d2565b620003276200031e82620002fa565b84845462000268565b825550505050565b600090565b6200033e6200032f565b6200034b81848462000304565b505050565b5b8181101562000373576200036760008262000334565b60018101905062000351565b5050565b601f821115620003c2576200038c8162000236565b62000397846200024b565b81016020851015620003a7578190505b620003bf620003b6856200024b565b83018262000350565b50505b505050565b600082821c905092915050565b6000620003e760001984600802620003c7565b1980831691505092915050565b6000620004028383620003d4565b9150826002028217905092915050565b6200041d8262000198565b67ffffffffffffffff811115620004395762000438620001a3565b5b62000445825462000201565b6200045282828562000377565b600060209050601f8311600181146200048a576000841562000475578287015190505b620004818582620003f4565b865550620004f1565b601f1984166200049a8662000236565b60005b82811015620004c4578489015182556001820191506020850194506020810190506200049d565b86831015620004e45784890151620004e0601f891682620003d4565b8355505b6001600288020188555050505b505050505050565b6137be80620005096000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063c87b56dd11610071578063c87b56dd14610306578063e985e9c514610336578063f2fde38b14610366578063f4cde74714610382578063f85e5fbb146103b257610121565b8063715018a6146102885780638da5cb5b1461029257806395d89b41146102b0578063a22cb465146102ce578063b88d4fde146102ea57610121565b806323b872dd116100f457806323b872dd146101c057806342842e0e146101dc5780636352211e146101f8578063651032df1461022857806370a082311461025857610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190611ffe565b6103ce565b60405161014d9190612046565b60405180910390f35b61015e61042f565b60405161016b91906120f1565b60405180910390f35b61018e60048036038101906101899190612149565b6104c1565b60405161019b91906121b7565b60405180910390f35b6101be60048036038101906101b991906121fe565b610507565b005b6101da60048036038101906101d5919061223e565b61061e565b005b6101f660048036038101906101f1919061223e565b61067e565b005b610212600480360381019061020d9190612149565b61069e565b60405161021f91906121b7565b60405180910390f35b610242600480360381019061023d9190612426565b610724565b60405161024f91906124c5565b60405180910390f35b610272600480360381019061026d91906124e0565b6108bf565b60405161027f91906124c5565b60405180910390f35b610290610976565b005b61029a61098a565b6040516102a791906121b7565b60405180910390f35b6102b86109b4565b6040516102c591906120f1565b60405180910390f35b6102e860048036038101906102e39190612539565b610a46565b005b61030460048036038101906102ff919061261a565b610a5c565b005b610320600480360381019061031b9190612149565b610abe565b60405161032d91906120f1565b60405180910390f35b610350600480360381019061034b919061269d565b610bd0565b60405161035d9190612046565b60405180910390f35b610380600480360381019061037b91906124e0565b610c64565b005b61039c600480360381019061039791906124e0565b610ce7565b6040516103a9919061279b565b60405180910390f35b6103cc60048036038101906103c791906127f7565b610e30565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610428575061042782610ee7565b5b9050919050565b60606000805461043e90612886565b80601f016020809104026020016040519081016040528092919081815260200182805461046a90612886565b80156104b75780601f1061048c576101008083540402835291602001916104b7565b820191906000526020600020905b81548152906001019060200180831161049a57829003601f168201915b5050505050905090565b60006104cc82610fc9565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105128261069e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057990612929565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105a1611014565b73ffffffffffffffffffffffffffffffffffffffff1614806105d057506105cf816105ca611014565b610bd0565b5b61060f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610606906129bb565b60405180910390fd5b610619838361101c565b505050565b61062f610629611014565b826110d5565b61066e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066590612a4d565b60405180910390fd5b61067983838361116a565b505050565b61069983838360405180602001604052806000815250610a5c565b505050565b6000806106aa83611463565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071290612ab9565b60405180910390fd5b80915050919050565b600061072e6114a0565b8282600a8282604051610742929190612b09565b908152602001604051809103902060009054906101000a900461ffff1661ffff1661078b600b8484604051610778929190612b09565b908152602001604051809103902061151e565b11156107cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c390612b6e565b60405180910390fd5b848460006107f8600b84846040516107e5929190612b09565b908152602001604051809103902061151e565b11610838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082f90612bda565b60405180910390fd5b610842600861152c565b600061084e600861151e565b905061085a8a82611542565b610864818a61175f565b8787600960008481526020019081526020016000209182610886929190612db1565b506108af600b898960405161089c929190612b09565b908152602001604051809103902061152c565b8095505050505050949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361092f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092690612ef3565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61097e6114a0565b6109886000611803565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109c390612886565b80601f01602080910402602001604051908101604052809291908181526020018280546109ef90612886565b8015610a3c5780601f10610a1157610100808354040283529160200191610a3c565b820191906000526020600020905b815481529060010190602001808311610a1f57829003601f168201915b5050505050905090565b610a58610a51611014565b83836118c9565b5050565b610a6d610a67611014565b836110d5565b610aac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa390612a4d565b60405180910390fd5b610ab884848484611a35565b50505050565b6060610ac982610fc9565b6000600660008481526020019081526020016000208054610ae990612886565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1590612886565b8015610b625780601f10610b3757610100808354040283529160200191610b62565b820191906000526020600020905b815481529060010190602001808311610b4557829003601f168201915b505050505090506000610b73611a91565b90506000815103610b88578192505050610bcb565b600082511115610bbd578082604051602001610ba5929190612f44565b60405160208183030381529060405292505050610bcb565b610bc684611aa8565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610c6c6114a0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd290612fda565b60405180910390fd5b610ce481611803565b50565b60606000610cf4836108bf565b905060008103610d39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3090613046565b60405180910390fd5b8067ffffffffffffffff811115610d5357610d5261229b565b5b604051908082528060200260200182016040528015610d815781602001602082028036833780820191505090505b5091506000600190505b610d95600861151e565b8111610e28578373ffffffffffffffffffffffffffffffffffffffff16610dbb8261069e565b73ffffffffffffffffffffffffffffffffffffffff1603610e1557600182610de39190613095565b915080838381518110610df957610df86130c9565b5b60200260200101818152505060008203610e14575050610e2b565b5b8080610e20906130f8565b915050610d8b565b50505b919050565b610e386114a0565b60008161ffff1611610e7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e769061318c565b60405180910390fd5b80600a8484604051610e92929190612b09565b908152602001604051809103902060006101000a81548161ffff021916908361ffff160217905550610ee2600b8484604051610ecf929190612b09565b908152602001604051809103902061152c565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610fb257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610fc25750610fc182611b10565b5b9050919050565b610fd281611b7a565b611011576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100890612ab9565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661108f8361069e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806110e18361069e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061112357506111228185610bd0565b5b8061116157508373ffffffffffffffffffffffffffffffffffffffff16611149846104c1565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661118a8261069e565b73ffffffffffffffffffffffffffffffffffffffff16146111e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d79061321e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361124f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611246906132b0565b60405180910390fd5b61125c8383836001611bbb565b8273ffffffffffffffffffffffffffffffffffffffff1661127c8261069e565b73ffffffffffffffffffffffffffffffffffffffff16146112d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c99061321e565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461145e8383836001611bc1565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6114a8611014565b73ffffffffffffffffffffffffffffffffffffffff166114c661098a565b73ffffffffffffffffffffffffffffffffffffffff161461151c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115139061331c565b60405180910390fd5b565b600081600001549050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a890613388565b60405180910390fd5b6115ba81611b7a565b156115fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f1906133f4565b60405180910390fd5b611608600083836001611bbb565b61161181611b7a565b15611651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611648906133f4565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461175b600083836001611bc1565b5050565b61176882611b7a565b6117a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179e90613486565b60405180910390fd5b806006600084815260200190815260200160002090816117c791906134a6565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516117f791906124c5565b60405180910390a15050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192e906135c4565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a289190612046565b60405180910390a3505050565b611a4084848461116a565b611a4c84848484611bc7565b611a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8290613656565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611ab382610fc9565b6000611abd611a91565b90506000815111611add5760405180602001604052806000815250611b08565b80611ae784611d4e565b604051602001611af8929190612f44565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611b9c83611463565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b6000611be88473ffffffffffffffffffffffffffffffffffffffff16611e1c565b15611d41578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c11611014565b8786866040518563ffffffff1660e01b8152600401611c3394939291906136cb565b6020604051808303816000875af1925050508015611c6f57506040513d601f19601f82011682018060405250810190611c6c919061372c565b60015b611cf1573d8060008114611c9f576040519150601f19603f3d011682016040523d82523d6000602084013e611ca4565b606091505b506000815103611ce9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce090613656565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d46565b600190505b949350505050565b606060006001611d5d84611e3f565b01905060008167ffffffffffffffff811115611d7c57611d7b61229b565b5b6040519080825280601f01601f191660200182016040528015611dae5781602001600182028036833780820191505090505b509050600082602001820190505b600115611e11578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611e0557611e04613759565b5b04945060008503611dbc575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611e9d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611e9357611e92613759565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611eda576d04ee2d6d415b85acef81000000008381611ed057611ecf613759565b5b0492506020810190505b662386f26fc100008310611f0957662386f26fc100008381611eff57611efe613759565b5b0492506010810190505b6305f5e1008310611f32576305f5e1008381611f2857611f27613759565b5b0492506008810190505b6127108310611f57576127108381611f4d57611f4c613759565b5b0492506004810190505b60648310611f7a5760648381611f7057611f6f613759565b5b0492506002810190505b600a8310611f89576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611fdb81611fa6565b8114611fe657600080fd5b50565b600081359050611ff881611fd2565b92915050565b60006020828403121561201457612013611f9c565b5b600061202284828501611fe9565b91505092915050565b60008115159050919050565b6120408161202b565b82525050565b600060208201905061205b6000830184612037565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561209b578082015181840152602081019050612080565b60008484015250505050565b6000601f19601f8301169050919050565b60006120c382612061565b6120cd818561206c565b93506120dd81856020860161207d565b6120e6816120a7565b840191505092915050565b6000602082019050818103600083015261210b81846120b8565b905092915050565b6000819050919050565b61212681612113565b811461213157600080fd5b50565b6000813590506121438161211d565b92915050565b60006020828403121561215f5761215e611f9c565b5b600061216d84828501612134565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121a182612176565b9050919050565b6121b181612196565b82525050565b60006020820190506121cc60008301846121a8565b92915050565b6121db81612196565b81146121e657600080fd5b50565b6000813590506121f8816121d2565b92915050565b6000806040838503121561221557612214611f9c565b5b6000612223858286016121e9565b925050602061223485828601612134565b9150509250929050565b60008060006060848603121561225757612256611f9c565b5b6000612265868287016121e9565b9350506020612276868287016121e9565b925050604061228786828701612134565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122d3826120a7565b810181811067ffffffffffffffff821117156122f2576122f161229b565b5b80604052505050565b6000612305611f92565b905061231182826122ca565b919050565b600067ffffffffffffffff8211156123315761233061229b565b5b61233a826120a7565b9050602081019050919050565b82818337600083830152505050565b600061236961236484612316565b6122fb565b90508281526020810184848401111561238557612384612296565b5b612390848285612347565b509392505050565b600082601f8301126123ad576123ac612291565b5b81356123bd848260208601612356565b91505092915050565b600080fd5b600080fd5b60008083601f8401126123e6576123e5612291565b5b8235905067ffffffffffffffff811115612403576124026123c6565b5b60208301915083600182028301111561241f5761241e6123cb565b5b9250929050565b600080600080606085870312156124405761243f611f9c565b5b600061244e878288016121e9565b945050602085013567ffffffffffffffff81111561246f5761246e611fa1565b5b61247b87828801612398565b935050604085013567ffffffffffffffff81111561249c5761249b611fa1565b5b6124a8878288016123d0565b925092505092959194509250565b6124bf81612113565b82525050565b60006020820190506124da60008301846124b6565b92915050565b6000602082840312156124f6576124f5611f9c565b5b6000612504848285016121e9565b91505092915050565b6125168161202b565b811461252157600080fd5b50565b6000813590506125338161250d565b92915050565b600080604083850312156125505761254f611f9c565b5b600061255e858286016121e9565b925050602061256f85828601612524565b9150509250929050565b600067ffffffffffffffff8211156125945761259361229b565b5b61259d826120a7565b9050602081019050919050565b60006125bd6125b884612579565b6122fb565b9050828152602081018484840111156125d9576125d8612296565b5b6125e4848285612347565b509392505050565b600082601f83011261260157612600612291565b5b81356126118482602086016125aa565b91505092915050565b6000806000806080858703121561263457612633611f9c565b5b6000612642878288016121e9565b9450506020612653878288016121e9565b935050604061266487828801612134565b925050606085013567ffffffffffffffff81111561268557612684611fa1565b5b612691878288016125ec565b91505092959194509250565b600080604083850312156126b4576126b3611f9c565b5b60006126c2858286016121e9565b92505060206126d3858286016121e9565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61271281612113565b82525050565b60006127248383612709565b60208301905092915050565b6000602082019050919050565b6000612748826126dd565b61275281856126e8565b935061275d836126f9565b8060005b8381101561278e5781516127758882612718565b975061278083612730565b925050600181019050612761565b5085935050505092915050565b600060208201905081810360008301526127b5818461273d565b905092915050565b600061ffff82169050919050565b6127d4816127bd565b81146127df57600080fd5b50565b6000813590506127f1816127cb565b92915050565b6000806000604084860312156128105761280f611f9c565b5b600084013567ffffffffffffffff81111561282e5761282d611fa1565b5b61283a868287016123d0565b9350935050602061284d868287016127e2565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061289e57607f821691505b6020821081036128b1576128b0612857565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061291360218361206c565b915061291e826128b7565b604082019050919050565b6000602082019050818103600083015261294281612906565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006129a5603d8361206c565b91506129b082612949565b604082019050919050565b600060208201905081810360008301526129d481612998565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612a37602d8361206c565b9150612a42826129db565b604082019050919050565b60006020820190508181036000830152612a6681612a2a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612aa360188361206c565b9150612aae82612a6d565b602082019050919050565b60006020820190508181036000830152612ad281612a96565b9050919050565b600081905092915050565b6000612af08385612ad9565b9350612afd838584612347565b82840190509392505050565b6000612b16828486612ae4565b91508190509392505050565b7f546f6b656e204973204465706c65746564000000000000000000000000000000600082015250565b6000612b5860118361206c565b9150612b6382612b22565b602082019050919050565b60006020820190508181036000830152612b8781612b4b565b9050919050565b7f546f6b656e204973204e6f7420496e6974696174656400000000000000000000600082015250565b6000612bc460168361206c565b9150612bcf82612b8e565b602082019050919050565b60006020820190508181036000830152612bf381612bb7565b9050919050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c677fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c2a565b612c718683612c2a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612cae612ca9612ca484612113565b612c89565b612113565b9050919050565b6000819050919050565b612cc883612c93565b612cdc612cd482612cb5565b848454612c37565b825550505050565b600090565b612cf1612ce4565b612cfc818484612cbf565b505050565b5b81811015612d2057612d15600082612ce9565b600181019050612d02565b5050565b601f821115612d6557612d3681612c05565b612d3f84612c1a565b81016020851015612d4e578190505b612d62612d5a85612c1a565b830182612d01565b50505b505050565b600082821c905092915050565b6000612d8860001984600802612d6a565b1980831691505092915050565b6000612da18383612d77565b9150826002028217905092915050565b612dbb8383612bfa565b67ffffffffffffffff811115612dd457612dd361229b565b5b612dde8254612886565b612de9828285612d24565b6000601f831160018114612e185760008415612e06578287013590505b612e108582612d95565b865550612e78565b601f198416612e2686612c05565b60005b82811015612e4e57848901358255600182019150602085019450602081019050612e29565b86831015612e6b5784890135612e67601f891682612d77565b8355505b6001600288020188555050505b50505050505050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612edd60298361206c565b9150612ee882612e81565b604082019050919050565b60006020820190508181036000830152612f0c81612ed0565b9050919050565b6000612f1e82612061565b612f288185612ad9565b9350612f3881856020860161207d565b80840191505092915050565b6000612f508285612f13565b9150612f5c8284612f13565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612fc460268361206c565b9150612fcf82612f68565b604082019050919050565b60006020820190508181036000830152612ff381612fb7565b9050919050565b7f4e6f20546f6b656e730000000000000000000000000000000000000000000000600082015250565b600061303060098361206c565b915061303b82612ffa565b602082019050919050565b6000602082019050818103600083015261305f81613023565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006130a082612113565b91506130ab83612113565b92508282039050818111156130c3576130c2613066565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061310382612113565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361313557613134613066565b5b600182019050919050565b7f436f756e744c696d6974206861766520746f20626967676572207468616e2030600082015250565b600061317660208361206c565b915061318182613140565b602082019050919050565b600060208201905081810360008301526131a581613169565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061320860258361206c565b9150613213826131ac565b604082019050919050565b60006020820190508181036000830152613237816131fb565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061329a60248361206c565b91506132a58261323e565b604082019050919050565b600060208201905081810360008301526132c98161328d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061330660208361206c565b9150613311826132d0565b602082019050919050565b60006020820190508181036000830152613335816132f9565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061337260208361206c565b915061337d8261333c565b602082019050919050565b600060208201905081810360008301526133a181613365565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006133de601c8361206c565b91506133e9826133a8565b602082019050919050565b6000602082019050818103600083015261340d816133d1565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613470602e8361206c565b915061347b82613414565b604082019050919050565b6000602082019050818103600083015261349f81613463565b9050919050565b6134af82612061565b67ffffffffffffffff8111156134c8576134c761229b565b5b6134d28254612886565b6134dd828285612d24565b600060209050601f83116001811461351057600084156134fe578287015190505b6135088582612d95565b865550613570565b601f19841661351e86612c05565b60005b8281101561354657848901518255600182019150602085019450602081019050613521565b86831015613563578489015161355f601f891682612d77565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006135ae60198361206c565b91506135b982613578565b602082019050919050565b600060208201905081810360008301526135dd816135a1565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061364060328361206c565b915061364b826135e4565b604082019050919050565b6000602082019050818103600083015261366f81613633565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061369d82613676565b6136a78185613681565b93506136b781856020860161207d565b6136c0816120a7565b840191505092915050565b60006080820190506136e060008301876121a8565b6136ed60208301866121a8565b6136fa60408301856124b6565b818103606083015261370c8184613692565b905095945050505050565b60008151905061372681611fd2565b92915050565b60006020828403121561374257613741611f9c565b5b600061375084828501613717565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220a9cf1500f96c272eac189cf856245b63f6d919b8f9a57b3896edad9394773d0664736f6c63430008120033\n";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETALLNFTOF = "getAllNftOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_INITIATENFT = "initiateNFT";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MAKENFT = "makeNFT";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BATCHMETADATAUPDATE_EVENT = new Event("BatchMetadataUpdate",
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event METADATAUPDATE_EVENT = new Event("MetadataUpdate",
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected BangleNFT(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected BangleNFT(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected BangleNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected BangleNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<BatchMetadataUpdateEventResponse> getBatchMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<BatchMetadataUpdateEventResponse> responses = new ArrayList<BatchMetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static BatchMetadataUpdateEventResponse getBatchMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(BATCHMETADATAUPDATE_EVENT, log);
        BatchMetadataUpdateEventResponse typedResponse = new BatchMetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._fromTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse._toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getBatchMetadataUpdateEventFromLog(log));
    }

    public Flowable<BatchMetadataUpdateEventResponse> batchMetadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BATCHMETADATAUPDATE_EVENT));
        return batchMetadataUpdateEventFlowable(filter);
    }

    public static List<MetadataUpdateEventResponse> getMetadataUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, transactionReceipt);
        ArrayList<MetadataUpdateEventResponse> responses = new ArrayList<MetadataUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static MetadataUpdateEventResponse getMetadataUpdateEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(METADATAUPDATE_EVENT, log);
        MetadataUpdateEventResponse typedResponse = new MetadataUpdateEventResponse();
        typedResponse.log = log;
        typedResponse._tokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getMetadataUpdateEventFromLog(log));
    }

    public Flowable<MetadataUpdateEventResponse> metadataUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METADATAUPDATE_EVENT));
        return metadataUpdateEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
            FUNC_APPROVE,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
            Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getAllNftOf(String operator) {
        final Function function = new Function(FUNC_GETALLNFTOF,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator)),
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
            new Callable<List>() {
                @Override
                @SuppressWarnings("unchecked")
                public List call() throws Exception {
                    List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                    return convertToNative(result);
                }
            });
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initiateNFT(String ipfsAddress, BigInteger countLimit) {
        final Function function = new Function(
            FUNC_INITIATENFT,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ipfsAddress),
                new org.web3j.abi.datatypes.generated.Uint16(countLimit)),
            Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner),
                new org.web3j.abi.datatypes.Address(160, operator)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> makeNFT(String buyer, String nftURI, String ipfsAddress) {
        final Function function = new Function(
            FUNC_MAKENFT,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, buyer),
                new org.web3j.abi.datatypes.Utf8String(nftURI),
                new org.web3j.abi.datatypes.Utf8String(ipfsAddress)),
            Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
            FUNC_RENOUNCEOWNERSHIP,
            Arrays.<Type>asList(),
            Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
            FUNC_safeTransferFrom,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                new org.web3j.abi.datatypes.Address(160, to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
            Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final Function function = new Function(
            FUNC_safeTransferFrom,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                new org.web3j.abi.datatypes.Address(160, to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(data)),
            Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
            FUNC_SETAPPROVALFORALL,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator),
                new org.web3j.abi.datatypes.Bool(approved)),
            Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
            FUNC_TRANSFERFROM,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                new org.web3j.abi.datatypes.Address(160, to),
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
            Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
            FUNC_TRANSFEROWNERSHIP,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
            Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static BangleNFT load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new BangleNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static BangleNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new BangleNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static BangleNFT load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new BangleNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static BangleNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new BangleNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<BangleNFT> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BangleNFT.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<BangleNFT> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(BangleNFT.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<BangleNFT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BangleNFT.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<BangleNFT> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(BangleNFT.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class BatchMetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;
    }

    public static class MetadataUpdateEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
